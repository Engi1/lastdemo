{
    "sourceFile": "src/main/java/com/example/lastdemo/cryptography/GenerateKeys.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1725432840346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725434526015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n         // 공개 키와 개인 키를 Base64로 인코딩\r\n         String publicKeyStr = Base64.getEncoder().encodeToString(keyPair.getPublic().getEncoded());\r\n         String privateKeyStr = Base64.getEncoder().encodeToString(keyPair.getPrivate().getEncoded());\r\n \r\n-        // 생성된 키 출력\r\n+        // 생성된 키 출력 (이 값을 DigitalSignatureExample에 넣어 사용)\r\n         System.out.println(\"Public Key: \" + publicKeyStr);\r\n         System.out.println(\"Private Key: \" + privateKeyStr);\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1725435339101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n         // 공개 키와 개인 키를 Base64로 인코딩\r\n         String publicKeyStr = Base64.getEncoder().encodeToString(keyPair.getPublic().getEncoded());\r\n         String privateKeyStr = Base64.getEncoder().encodeToString(keyPair.getPrivate().getEncoded());\r\n \r\n-        // 생성된 키 출력 (이 값을 DigitalSignatureExample에 넣어 사용)\r\n+        // 생성된 키 출력\r\n         System.out.println(\"Public Key: \" + publicKeyStr);\r\n         System.out.println(\"Private Key: \" + privateKeyStr);\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1725435790584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,23 @@\n-package com.example.lastdemo.cryptography;\r\n+// package com.example.lastdemo.cryptography;\r\n \r\n-import java.security.KeyPair;\r\n-import java.security.KeyPairGenerator;\r\n-import java.util.Base64;\r\n+// import java.security.KeyPair;\r\n+// import java.security.KeyPairGenerator;\r\n+// import java.util.Base64;\r\n \r\n-public class GenerateKeys {\r\n+// public class GenerateKeys {\r\n \r\n-    public static void main(String[] args) throws Exception {\r\n-        // RSA 키 쌍 생성\r\n-        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\r\n-        keyPairGenerator.initialize(2048);\r\n-        KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n+//     public static void main(String[] args) throws Exception {\r\n+//         // RSA 키 쌍 생성\r\n+//         KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\r\n+//         keyPairGenerator.initialize(2048);\r\n+//         KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n \r\n-        // 공개 키와 개인 키를 Base64로 인코딩\r\n-        String publicKeyStr = Base64.getEncoder().encodeToString(keyPair.getPublic().getEncoded());\r\n-        String privateKeyStr = Base64.getEncoder().encodeToString(keyPair.getPrivate().getEncoded());\r\n+//         // 공개 키와 개인 키를 Base64로 인코딩\r\n+//         String publicKeyStr = Base64.getEncoder().encodeToString(keyPair.getPublic().getEncoded());\r\n+//         String privateKeyStr = Base64.getEncoder().encodeToString(keyPair.getPrivate().getEncoded());\r\n \r\n-        // 생성된 키 출력\r\n-        System.out.println(\"Public Key: \" + publicKeyStr);\r\n-        System.out.println(\"Private Key: \" + privateKeyStr);\r\n-    }\r\n-}\r\n+//         // 생성된 키 출력 (이 값을 DigitalSignatureExample에 넣어 사용)\r\n+//         System.out.println(\"Public Key: \" + publicKeyStr);\r\n+//         System.out.println(\"Private Key: \" + privateKeyStr);\r\n+//     }\r\n+// }\r\n"
                }
            ],
            "date": 1725432840346,
            "name": "Commit-0",
            "content": "package com.example.lastdemo.cryptography;\r\n\r\nimport java.security.KeyPair;\r\nimport java.security.KeyPairGenerator;\r\nimport java.util.Base64;\r\n\r\npublic class GenerateKeys {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        // RSA 키 쌍 생성\r\n        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\r\n        keyPairGenerator.initialize(2048);\r\n        KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n\r\n        // 공개 키와 개인 키를 Base64로 인코딩\r\n        String publicKeyStr = Base64.getEncoder().encodeToString(keyPair.getPublic().getEncoded());\r\n        String privateKeyStr = Base64.getEncoder().encodeToString(keyPair.getPrivate().getEncoded());\r\n\r\n        // 생성된 키 출력\r\n        System.out.println(\"Public Key: \" + publicKeyStr);\r\n        System.out.println(\"Private Key: \" + privateKeyStr);\r\n    }\r\n}\r\n"
        }
    ]
}