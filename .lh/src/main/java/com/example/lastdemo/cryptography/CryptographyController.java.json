{
    "sourceFile": "src/main/java/com/example/lastdemo/cryptography/CryptographyController.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1725352370133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725352536026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n @RestController\r\n @RequestMapping(\"/api/cryptography\")\r\n public class CryptographyController {\r\n \r\n+    // 대칭 암호화 (AES)\r\n     @PostMapping(\"/encrypt\")\r\n     public String encrypt(@RequestParam String message) throws Exception {\r\n         SymmetricEncryptionExample example = new SymmetricEncryptionExample();\r\n         return example.encryptMessage(message);\r\n@@ -16,5 +17,38 @@\n     public String decrypt(@RequestParam String encryptedMessage) throws Exception {\r\n         SymmetricEncryptionExample example = new SymmetricEncryptionExample();\r\n         return example.decryptMessage(encryptedMessage);\r\n     }\r\n+\r\n+    // 비대칭 암호화 (RSA)\r\n+    @PostMapping(\"/asymmetric/encrypt\")\r\n+    public String asymmetricEncrypt(@RequestParam String message) throws Exception {\r\n+        AsymmetricEncryptionExample example = new AsymmetricEncryptionExample();\r\n+        return example.encryptMessage(message);\r\n+    }\r\n+\r\n+    @PostMapping(\"/asymmetric/decrypt\")\r\n+    public String asymmetricDecrypt(@RequestParam String encryptedMessage) throws Exception {\r\n+        AsymmetricEncryptionExample example = new AsymmetricEncryptionExample();\r\n+        return example.decryptMessage(encryptedMessage);\r\n+    }\r\n+\r\n+    // 해시 함수 (SHA-256)\r\n+    @PostMapping(\"/hash\")\r\n+    public String hash(@RequestParam String message) throws Exception {\r\n+        HashFunctionExample example = new HashFunctionExample();\r\n+        return example.generateHash(message);\r\n+    }\r\n+\r\n+    // 디지털 서명 (RSA 서명)\r\n+    @PostMapping(\"/sign\")\r\n+    public String sign(@RequestParam String message) throws Exception {\r\n+        DigitalSignatureExample example = new DigitalSignatureExample();\r\n+        return example.signMessage(message);\r\n+    }\r\n+\r\n+    @PostMapping(\"/verify\")\r\n+    public boolean verify(@RequestParam String message, @RequestParam String signature) throws Exception {\r\n+        DigitalSignatureExample example = new DigitalSignatureExample();\r\n+        return example.verifySignature(message, signature);\r\n+    }\r\n }\r\n"
                },
                {
                    "date": 1725352772618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,52 +1,90 @@\n package com.example.lastdemo.cryptography;\r\n \r\n+import io.swagger.v3.oas.annotations.Operation;\r\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\r\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\r\n import org.springframework.web.bind.annotation.*;\r\n \r\n @RestController\r\n @RequestMapping(\"/api/cryptography\")\r\n public class CryptographyController {\r\n \r\n     // 대칭 암호화 (AES)\r\n+    @Operation(summary = \"대칭 암호화 (AES)\", description = \"주어진 메시지를 AES 대칭 암호화 알고리즘으로 암호화합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"암호화 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/encrypt\")\r\n     public String encrypt(@RequestParam String message) throws Exception {\r\n         SymmetricEncryptionExample example = new SymmetricEncryptionExample();\r\n         return example.encryptMessage(message);\r\n     }\r\n \r\n+    @Operation(summary = \"대칭 복호화 (AES)\", description = \"암호화된 메시지를 AES 대칭 암호화 알고리즘으로 복호화합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"복호화 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/decrypt\")\r\n     public String decrypt(@RequestParam String encryptedMessage) throws Exception {\r\n         SymmetricEncryptionExample example = new SymmetricEncryptionExample();\r\n         return example.decryptMessage(encryptedMessage);\r\n     }\r\n \r\n     // 비대칭 암호화 (RSA)\r\n+    @Operation(summary = \"비대칭 암호화 (RSA)\", description = \"주어진 메시지를 RSA 비대칭 암호화 알고리즘으로 암호화합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"암호화 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/asymmetric/encrypt\")\r\n     public String asymmetricEncrypt(@RequestParam String message) throws Exception {\r\n         AsymmetricEncryptionExample example = new AsymmetricEncryptionExample();\r\n         return example.encryptMessage(message);\r\n     }\r\n \r\n+    @Operation(summary = \"비대칭 복호화 (RSA)\", description = \"암호화된 메시지를 RSA 비대칭 암호화 알고리즘으로 복호화합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"복호화 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/asymmetric/decrypt\")\r\n     public String asymmetricDecrypt(@RequestParam String encryptedMessage) throws Exception {\r\n         AsymmetricEncryptionExample example = new AsymmetricEncryptionExample();\r\n         return example.decryptMessage(encryptedMessage);\r\n     }\r\n \r\n     // 해시 함수 (SHA-256)\r\n+    @Operation(summary = \"해시 생성 (SHA-256)\", description = \"주어진 메시지에 대해 SHA-256 해시 값을 생성합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"해시 생성 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/hash\")\r\n     public String hash(@RequestParam String message) throws Exception {\r\n         HashFunctionExample example = new HashFunctionExample();\r\n         return example.generateHash(message);\r\n     }\r\n \r\n     // 디지털 서명 (RSA 서명)\r\n+    @Operation(summary = \"디지털 서명 생성\", description = \"주어진 메시지에 대해 RSA 알고리즘으로 디지털 서명을 생성합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"서명 생성 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/sign\")\r\n     public String sign(@RequestParam String message) throws Exception {\r\n         DigitalSignatureExample example = new DigitalSignatureExample();\r\n         return example.signMessage(message);\r\n     }\r\n \r\n+    @Operation(summary = \"디지털 서명 검증\", description = \"주어진 메시지와 서명을 사용해 RSA 알고리즘으로 서명을 검증합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"서명 검증 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/verify\")\r\n     public boolean verify(@RequestParam String message, @RequestParam String signature) throws Exception {\r\n         DigitalSignatureExample example = new DigitalSignatureExample();\r\n         return example.verifySignature(message, signature);\r\n"
                },
                {
                    "date": 1725353412793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,92 +1,54 @@\n package com.example.lastdemo.cryptography;\r\n \r\n-import io.swagger.v3.oas.annotations.Operation;\r\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\r\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\r\n import org.springframework.web.bind.annotation.*;\r\n \r\n @RestController\r\n @RequestMapping(\"/api/cryptography\")\r\n public class CryptographyController {\r\n \r\n     // 대칭 암호화 (AES)\r\n-    @Operation(summary = \"대칭 암호화 (AES)\", description = \"주어진 메시지를 AES 대칭 암호화 알고리즘으로 암호화합니다.\")\r\n-    @ApiResponses(value = {\r\n-        @ApiResponse(responseCode = \"200\", description = \"암호화 성공\"),\r\n-        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n-    })\r\n     @PostMapping(\"/encrypt\")\r\n-    public String encrypt(@RequestParam String message) throws Exception {\r\n+    public String encrypt(@RequestParam(\"message\") String message) throws Exception {\r\n         SymmetricEncryptionExample example = new SymmetricEncryptionExample();\r\n         return example.encryptMessage(message);\r\n     }\r\n \r\n-    @Operation(summary = \"대칭 복호화 (AES)\", description = \"암호화된 메시지를 AES 대칭 암호화 알고리즘으로 복호화합니다.\")\r\n-    @ApiResponses(value = {\r\n-        @ApiResponse(responseCode = \"200\", description = \"복호화 성공\"),\r\n-        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n-    })\r\n     @PostMapping(\"/decrypt\")\r\n-    public String decrypt(@RequestParam String encryptedMessage) throws Exception {\r\n+    public String decrypt(@RequestParam(\"encryptedMessage\") String encryptedMessage) throws Exception {\r\n         SymmetricEncryptionExample example = new SymmetricEncryptionExample();\r\n         return example.decryptMessage(encryptedMessage);\r\n     }\r\n \r\n     // 비대칭 암호화 (RSA)\r\n-    @Operation(summary = \"비대칭 암호화 (RSA)\", description = \"주어진 메시지를 RSA 비대칭 암호화 알고리즘으로 암호화합니다.\")\r\n-    @ApiResponses(value = {\r\n-        @ApiResponse(responseCode = \"200\", description = \"암호화 성공\"),\r\n-        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n-    })\r\n     @PostMapping(\"/asymmetric/encrypt\")\r\n-    public String asymmetricEncrypt(@RequestParam String message) throws Exception {\r\n+    public String asymmetricEncrypt(@RequestParam(\"message\") String message) throws Exception {\r\n         AsymmetricEncryptionExample example = new AsymmetricEncryptionExample();\r\n         return example.encryptMessage(message);\r\n     }\r\n \r\n-    @Operation(summary = \"비대칭 복호화 (RSA)\", description = \"암호화된 메시지를 RSA 비대칭 암호화 알고리즘으로 복호화합니다.\")\r\n-    @ApiResponses(value = {\r\n-        @ApiResponse(responseCode = \"200\", description = \"복호화 성공\"),\r\n-        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n-    })\r\n     @PostMapping(\"/asymmetric/decrypt\")\r\n-    public String asymmetricDecrypt(@RequestParam String encryptedMessage) throws Exception {\r\n+    public String asymmetricDecrypt(@RequestParam(\"encryptedMessage\") String encryptedMessage) throws Exception {\r\n         AsymmetricEncryptionExample example = new AsymmetricEncryptionExample();\r\n         return example.decryptMessage(encryptedMessage);\r\n     }\r\n \r\n     // 해시 함수 (SHA-256)\r\n-    @Operation(summary = \"해시 생성 (SHA-256)\", description = \"주어진 메시지에 대해 SHA-256 해시 값을 생성합니다.\")\r\n-    @ApiResponses(value = {\r\n-        @ApiResponse(responseCode = \"200\", description = \"해시 생성 성공\"),\r\n-        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n-    })\r\n     @PostMapping(\"/hash\")\r\n-    public String hash(@RequestParam String message) throws Exception {\r\n+    public String hash(@RequestParam(\"message\") String message) throws Exception {\r\n         HashFunctionExample example = new HashFunctionExample();\r\n         return example.generateHash(message);\r\n     }\r\n \r\n     // 디지털 서명 (RSA 서명)\r\n-    @Operation(summary = \"디지털 서명 생성\", description = \"주어진 메시지에 대해 RSA 알고리즘으로 디지털 서명을 생성합니다.\")\r\n-    @ApiResponses(value = {\r\n-        @ApiResponse(responseCode = \"200\", description = \"서명 생성 성공\"),\r\n-        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n-    })\r\n     @PostMapping(\"/sign\")\r\n-    public String sign(@RequestParam String message) throws Exception {\r\n+    public String sign(@RequestParam(\"message\") String message) throws Exception {\r\n         DigitalSignatureExample example = new DigitalSignatureExample();\r\n         return example.signMessage(message);\r\n     }\r\n \r\n-    @Operation(summary = \"디지털 서명 검증\", description = \"주어진 메시지와 서명을 사용해 RSA 알고리즘으로 서명을 검증합니다.\")\r\n-    @ApiResponses(value = {\r\n-        @ApiResponse(responseCode = \"200\", description = \"서명 검증 성공\"),\r\n-        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n-    })\r\n     @PostMapping(\"/verify\")\r\n-    public boolean verify(@RequestParam String message, @RequestParam String signature) throws Exception {\r\n+    public boolean verify(@RequestParam(\"message\") String message, @RequestParam(\"signature\") String signature) throws Exception {\r\n         DigitalSignatureExample example = new DigitalSignatureExample();\r\n         return example.verifySignature(message, signature);\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1725353707014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,52 +1,90 @@\n package com.example.lastdemo.cryptography;\r\n \r\n+import io.swagger.v3.oas.annotations.Operation;\r\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\r\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\r\n import org.springframework.web.bind.annotation.*;\r\n \r\n @RestController\r\n @RequestMapping(\"/api/cryptography\")\r\n public class CryptographyController {\r\n \r\n     // 대칭 암호화 (AES)\r\n+    @Operation(summary = \"대칭 암호화 (AES)\", description = \"주어진 메시지를 AES 대칭 암호화 알고리즘으로 암호화합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"암호화 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/encrypt\")\r\n     public String encrypt(@RequestParam(\"message\") String message) throws Exception {\r\n         SymmetricEncryptionExample example = new SymmetricEncryptionExample();\r\n         return example.encryptMessage(message);\r\n     }\r\n \r\n+    @Operation(summary = \"대칭 복호화 (AES)\", description = \"암호화된 메시지를 AES 대칭 암호화 알고리즘으로 복호화합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"복호화 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/decrypt\")\r\n     public String decrypt(@RequestParam(\"encryptedMessage\") String encryptedMessage) throws Exception {\r\n         SymmetricEncryptionExample example = new SymmetricEncryptionExample();\r\n         return example.decryptMessage(encryptedMessage);\r\n     }\r\n \r\n     // 비대칭 암호화 (RSA)\r\n+    @Operation(summary = \"비대칭 암호화 (RSA)\", description = \"주어진 메시지를 RSA 비대칭 암호화 알고리즘으로 암호화합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"암호화 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/asymmetric/encrypt\")\r\n     public String asymmetricEncrypt(@RequestParam(\"message\") String message) throws Exception {\r\n         AsymmetricEncryptionExample example = new AsymmetricEncryptionExample();\r\n         return example.encryptMessage(message);\r\n     }\r\n \r\n+    @Operation(summary = \"비대칭 복호화 (RSA)\", description = \"암호화된 메시지를 RSA 비대칭 암호화 알고리즘으로 복호화합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"복호화 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/asymmetric/decrypt\")\r\n     public String asymmetricDecrypt(@RequestParam(\"encryptedMessage\") String encryptedMessage) throws Exception {\r\n         AsymmetricEncryptionExample example = new AsymmetricEncryptionExample();\r\n         return example.decryptMessage(encryptedMessage);\r\n     }\r\n \r\n     // 해시 함수 (SHA-256)\r\n+    @Operation(summary = \"해시 생성 (SHA-256)\", description = \"주어진 메시지에 대해 SHA-256 해시 값을 생성합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"해시 생성 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/hash\")\r\n     public String hash(@RequestParam(\"message\") String message) throws Exception {\r\n         HashFunctionExample example = new HashFunctionExample();\r\n         return example.generateHash(message);\r\n     }\r\n \r\n     // 디지털 서명 (RSA 서명)\r\n+    @Operation(summary = \"디지털 서명 생성\", description = \"주어진 메시지에 대해 RSA 알고리즘으로 디지털 서명을 생성합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"서명 생성 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/sign\")\r\n     public String sign(@RequestParam(\"message\") String message) throws Exception {\r\n         DigitalSignatureExample example = new DigitalSignatureExample();\r\n         return example.signMessage(message);\r\n     }\r\n \r\n+    @Operation(summary = \"디지털 서명 검증\", description = \"주어진 메시지와 서명을 사용해 RSA 알고리즘으로 서명을 검증합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"서명 검증 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/verify\")\r\n     public boolean verify(@RequestParam(\"message\") String message, @RequestParam(\"signature\") String signature) throws Exception {\r\n         DigitalSignatureExample example = new DigitalSignatureExample();\r\n         return example.verifySignature(message, signature);\r\n"
                },
                {
                    "date": 1725434880934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,19 @@\n @RestController\r\n @RequestMapping(\"/api/cryptography\")\r\n public class CryptographyController {\r\n \r\n+    // 공개키와 개인키는 실제 사용할 때 적절히 설정된 값을 전달해야 합니다.\r\n+    private static final String PUBLIC_KEY_STR = \"여기에_생성된_공개키_문자열_복사\";\r\n+    private static final String PRIVATE_KEY_STR = \"여기에_생성된_개인키_문자열_복사\";\r\n+\r\n+    private final DigitalSignatureExample digitalSignatureExample;\r\n+\r\n+    // 생성자에서 DigitalSignatureExample을 초기화합니다.\r\n+    public CryptographyController() throws Exception {\r\n+        this.digitalSignatureExample = new DigitalSignatureExample(PUBLIC_KEY_STR, PRIVATE_KEY_STR);\r\n+    }\r\n+\r\n     // 대칭 암호화 (AES)\r\n     @Operation(summary = \"대칭 암호화 (AES)\", description = \"주어진 메시지를 AES 대칭 암호화 알고리즘으로 암호화합니다.\")\r\n     @ApiResponses(value = {\r\n         @ApiResponse(responseCode = \"200\", description = \"암호화 성공\"),\r\n@@ -66,27 +77,26 @@\n         HashFunctionExample example = new HashFunctionExample();\r\n         return example.generateHash(message);\r\n     }\r\n \r\n-    // 디지털 서명 (RSA 서명)\r\n+    // 디지털 서명 생성\r\n     @Operation(summary = \"디지털 서명 생성\", description = \"주어진 메시지에 대해 RSA 알고리즘으로 디지털 서명을 생성합니다.\")\r\n     @ApiResponses(value = {\r\n         @ApiResponse(responseCode = \"200\", description = \"서명 생성 성공\"),\r\n         @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n     })\r\n     @PostMapping(\"/sign\")\r\n     public String sign(@RequestParam(\"message\") String message) throws Exception {\r\n-        DigitalSignatureExample example = new DigitalSignatureExample();\r\n-        return example.signMessage(message);\r\n+        return digitalSignatureExample.signMessage(message);\r\n     }\r\n \r\n+    // 디지털 서명 검증\r\n     @Operation(summary = \"디지털 서명 검증\", description = \"주어진 메시지와 서명을 사용해 RSA 알고리즘으로 서명을 검증합니다.\")\r\n     @ApiResponses(value = {\r\n         @ApiResponse(responseCode = \"200\", description = \"서명 검증 성공\"),\r\n         @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n     })\r\n     @PostMapping(\"/verify\")\r\n     public boolean verify(@RequestParam(\"message\") String message, @RequestParam(\"signature\") String signature) throws Exception {\r\n-        DigitalSignatureExample example = new DigitalSignatureExample();\r\n-        return example.verifySignature(message, signature);\r\n+        return digitalSignatureExample.verifySignature(message, signature);\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1725435013493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,17 +8,23 @@\n @RestController\r\n @RequestMapping(\"/api/cryptography\")\r\n public class CryptographyController {\r\n \r\n-    // 공개키와 개인키는 실제 사용할 때 적절히 설정된 값을 전달해야 합니다.\r\n     private static final String PUBLIC_KEY_STR = \"여기에_생성된_공개키_문자열_복사\";\r\n     private static final String PRIVATE_KEY_STR = \"여기에_생성된_개인키_문자열_복사\";\r\n \r\n     private final DigitalSignatureExample digitalSignatureExample;\r\n \r\n-    // 생성자에서 DigitalSignatureExample을 초기화합니다.\r\n-    public CryptographyController() throws Exception {\r\n-        this.digitalSignatureExample = new DigitalSignatureExample(PUBLIC_KEY_STR, PRIVATE_KEY_STR);\r\n+    public CryptographyController() {\r\n+        DigitalSignatureExample tempExample;\r\n+        try {\r\n+            tempExample = new DigitalSignatureExample(PUBLIC_KEY_STR, PRIVATE_KEY_STR);\r\n+        } catch (Exception e) {\r\n+            e.printStackTrace();\r\n+            // 로그를 추가하거나 사용자 정의 예외를 던질 수 있습니다.\r\n+            tempExample = null;  // 또는 적절한 예외 처리를 추가하세요.\r\n+        }\r\n+        this.digitalSignatureExample = tempExample;\r\n     }\r\n \r\n     // 대칭 암호화 (AES)\r\n     @Operation(summary = \"대칭 암호화 (AES)\", description = \"주어진 메시지를 AES 대칭 암호화 알고리즘으로 암호화합니다.\")\r\n"
                },
                {
                    "date": 1725435030637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,8 @@\n         HashFunctionExample example = new HashFunctionExample();\r\n         return example.generateHash(message);\r\n     }\r\n \r\n-    // 디지털 서명 생성\r\n     @Operation(summary = \"디지털 서명 생성\", description = \"주어진 메시지에 대해 RSA 알고리즘으로 디지털 서명을 생성합니다.\")\r\n     @ApiResponses(value = {\r\n         @ApiResponse(responseCode = \"200\", description = \"서명 생성 성공\"),\r\n         @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n@@ -94,9 +93,8 @@\n     public String sign(@RequestParam(\"message\") String message) throws Exception {\r\n         return digitalSignatureExample.signMessage(message);\r\n     }\r\n \r\n-    // 디지털 서명 검증\r\n     @Operation(summary = \"디지털 서명 검증\", description = \"주어진 메시지와 서명을 사용해 RSA 알고리즘으로 서명을 검증합니다.\")\r\n     @ApiResponses(value = {\r\n         @ApiResponse(responseCode = \"200\", description = \"서명 검증 성공\"),\r\n         @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n"
                },
                {
                    "date": 1725435157752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,16 +13,17 @@\n     private static final String PRIVATE_KEY_STR = \"여기에_생성된_개인키_문자열_복사\";\r\n \r\n     private final DigitalSignatureExample digitalSignatureExample;\r\n \r\n-    public CryptographyController() {\r\n+    public CryptographyController() throws Exception {\r\n+        // 예외 처리 추가\r\n         DigitalSignatureExample tempExample;\r\n         try {\r\n             tempExample = new DigitalSignatureExample(PUBLIC_KEY_STR, PRIVATE_KEY_STR);\r\n         } catch (Exception e) {\r\n+            // 예외를 잡아 로그를 출력하고 예외를 다시 던집니다.\r\n             e.printStackTrace();\r\n-            // 로그를 추가하거나 사용자 정의 예외를 던질 수 있습니다.\r\n-            tempExample = null;  // 또는 적절한 예외 처리를 추가하세요.\r\n+            throw new RuntimeException(\"Failed to initialize DigitalSignatureExample\", e);\r\n         }\r\n         this.digitalSignatureExample = tempExample;\r\n     }\r\n \r\n"
                },
                {
                    "date": 1725435177510,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,8 +91,11 @@\n         @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n     })\r\n     @PostMapping(\"/sign\")\r\n     public String sign(@RequestParam(\"message\") String message) throws Exception {\r\n+        if (digitalSignatureExample == null) {\r\n+            throw new IllegalStateException(\"DigitalSignatureExample is not initialized properly.\");\r\n+        }\r\n         return digitalSignatureExample.signMessage(message);\r\n     }\r\n \r\n     @Operation(summary = \"디지털 서명 검증\", description = \"주어진 메시지와 서명을 사용해 RSA 알고리즘으로 서명을 검증합니다.\")\r\n@@ -101,7 +104,13 @@\n         @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n     })\r\n     @PostMapping(\"/verify\")\r\n     public boolean verify(@RequestParam(\"message\") String message, @RequestParam(\"signature\") String signature) throws Exception {\r\n+        if (digitalSignatureExample == null) {\r\n+            throw new IllegalStateException(\"DigitalSignatureExample is not initialized properly.\");\r\n+        }\r\n         return digitalSignatureExample.verifySignature(message, signature);\r\n     }\r\n+\r\n+\r\n+\r\n }\r\n"
                },
                {
                    "date": 1725435197971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,10 @@\n         @ApiResponse(responseCode = \"200\", description = \"서명 검증 성공\"),\r\n         @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n     })\r\n     @PostMapping(\"/verify\")\r\n-    public boolean verify(@RequestParam(\"message\") String message, @RequestParam(\"signature\") String signature) throws Exception {\r\n+    public boolean verify(@RequestParam(\"message\") String message, \r\n+                          @RequestParam(\"signature\") String signature) throws Exception {\r\n         if (digitalSignatureExample == null) {\r\n             throw new IllegalStateException(\"DigitalSignatureExample is not initialized properly.\");\r\n         }\r\n         return digitalSignatureExample.verifySignature(message, signature);\r\n"
                },
                {
                    "date": 1725435830069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,26 +8,8 @@\n @RestController\r\n @RequestMapping(\"/api/cryptography\")\r\n public class CryptographyController {\r\n \r\n-    private static final String PUBLIC_KEY_STR = \"여기에_생성된_공개키_문자열_복사\";\r\n-    private static final String PRIVATE_KEY_STR = \"여기에_생성된_개인키_문자열_복사\";\r\n-\r\n-    private final DigitalSignatureExample digitalSignatureExample;\r\n-\r\n-    public CryptographyController() throws Exception {\r\n-        // 예외 처리 추가\r\n-        DigitalSignatureExample tempExample;\r\n-        try {\r\n-            tempExample = new DigitalSignatureExample(PUBLIC_KEY_STR, PRIVATE_KEY_STR);\r\n-        } catch (Exception e) {\r\n-            // 예외를 잡아 로그를 출력하고 예외를 다시 던집니다.\r\n-            e.printStackTrace();\r\n-            throw new RuntimeException(\"Failed to initialize DigitalSignatureExample\", e);\r\n-        }\r\n-        this.digitalSignatureExample = tempExample;\r\n-    }\r\n-\r\n     // 대칭 암호화 (AES)\r\n     @Operation(summary = \"대칭 암호화 (AES)\", description = \"주어진 메시지를 AES 대칭 암호화 알고리즘으로 암호화합니다.\")\r\n     @ApiResponses(value = {\r\n         @ApiResponse(responseCode = \"200\", description = \"암호화 성공\"),\r\n@@ -84,34 +66,36 @@\n         HashFunctionExample example = new HashFunctionExample();\r\n         return example.generateHash(message);\r\n     }\r\n \r\n-    @Operation(summary = \"디지털 서명 생성\", description = \"주어진 메시지에 대해 RSA 알고리즘으로 디지털 서명을 생성합니다.\")\r\n+    @RestController\r\n+@RequestMapping(\"/api/cryptography\")\r\n+public class CryptographyController {\r\n+\r\n+    // 디지털 서명 생성\r\n+    @Operation(summary = \"디지털 서명 생성\", description = \"주어진 메시지에 대해 RSA를 이용한 디지털 서명을 생성합니다.\")\r\n     @ApiResponses(value = {\r\n         @ApiResponse(responseCode = \"200\", description = \"서명 생성 성공\"),\r\n         @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n     })\r\n     @PostMapping(\"/sign\")\r\n     public String sign(@RequestParam(\"message\") String message) throws Exception {\r\n-        if (digitalSignatureExample == null) {\r\n-            throw new IllegalStateException(\"DigitalSignatureExample is not initialized properly.\");\r\n-        }\r\n-        return digitalSignatureExample.signMessage(message);\r\n+        DigitalSignatureExample example = new DigitalSignatureExample();\r\n+        return example.signMessage(message);\r\n     }\r\n \r\n-    @Operation(summary = \"디지털 서명 검증\", description = \"주어진 메시지와 서명을 사용해 RSA 알고리즘으로 서명을 검증합니다.\")\r\n+    // 디지털 서명 검증\r\n+    @Operation(summary = \"디지털 서명 검증\", description = \"주어진 메시지와 서명을 이용해 디지털 서명을 검증합니다.\")\r\n     @ApiResponses(value = {\r\n         @ApiResponse(responseCode = \"200\", description = \"서명 검증 성공\"),\r\n         @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n     })\r\n     @PostMapping(\"/verify\")\r\n-    public boolean verify(@RequestParam(\"message\") String message, \r\n-                          @RequestParam(\"signature\") String signature) throws Exception {\r\n-        if (digitalSignatureExample == null) {\r\n-            throw new IllegalStateException(\"DigitalSignatureExample is not initialized properly.\");\r\n-        }\r\n-        return digitalSignatureExample.verifySignature(message, signature);\r\n+    public boolean verify(@RequestParam(\"message\") String message, @RequestParam(\"signature\") String signature) throws Exception {\r\n+        DigitalSignatureExample example = new DigitalSignatureExample();\r\n+        return example.verifySignature(message, signature);\r\n     }\r\n+}\r\n \r\n \r\n \r\n }\r\n"
                },
                {
                    "date": 1725435842642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,12 +66,8 @@\n         HashFunctionExample example = new HashFunctionExample();\r\n         return example.generateHash(message);\r\n     }\r\n \r\n-    @RestController\r\n-@RequestMapping(\"/api/cryptography\")\r\n-public class CryptographyController {\r\n-\r\n     // 디지털 서명 생성\r\n     @Operation(summary = \"디지털 서명 생성\", description = \"주어진 메시지에 대해 RSA를 이용한 디지털 서명을 생성합니다.\")\r\n     @ApiResponses(value = {\r\n         @ApiResponse(responseCode = \"200\", description = \"서명 생성 성공\"),\r\n"
                },
                {
                    "date": 1725438396512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,92 +2,188 @@\n \r\n import io.swagger.v3.oas.annotations.Operation;\r\n import io.swagger.v3.oas.annotations.responses.ApiResponse;\r\n import io.swagger.v3.oas.annotations.responses.ApiResponses;\r\n+import io.swagger.v3.oas.annotations.media.Content;\r\n+import io.swagger.v3.oas.annotations.media.ExampleObject;\r\n+import org.springframework.http.HttpStatus;\r\n+import org.springframework.http.ResponseEntity;\r\n import org.springframework.web.bind.annotation.*;\r\n \r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n @RestController\r\n @RequestMapping(\"/api/cryptography\")\r\n public class CryptographyController {\r\n \r\n     // 대칭 암호화 (AES)\r\n-    @Operation(summary = \"대칭 암호화 (AES)\", description = \"주어진 메시지를 AES 대칭 암호화 알고리즘으로 암호화합니다.\")\r\n-    @ApiResponses(value = {\r\n-        @ApiResponse(responseCode = \"200\", description = \"암호화 성공\"),\r\n-        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n-    })\r\n+    @Operation(summary = \"대칭 암호화 (AES)\", description = \"주어진 메시지를 AES 대칭 암호화 알고리즘으로 암호화합니다.\",\r\n+               responses = {\r\n+                   @ApiResponse(responseCode = \"200\", description = \"암호화 성공\", \r\n+                                content = @Content(mediaType = \"application/json\", \r\n+                                                   examples = @ExampleObject(value = \"{\\\"encryptedMessage\\\": \\\"...\\\"}\"))),\r\n+                   @ApiResponse(responseCode = \"400\", description = \"잘못된 요청\"),\r\n+                   @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+               })\r\n     @PostMapping(\"/encrypt\")\r\n-    public String encrypt(@RequestParam(\"message\") String message) throws Exception {\r\n-        SymmetricEncryptionExample example = new SymmetricEncryptionExample();\r\n-        return example.encryptMessage(message);\r\n+    public ResponseEntity<String> encrypt(@RequestParam(\"message\") String message) {\r\n+        if (message == null || message.isEmpty()) {\r\n+            return ResponseEntity.badRequest().body(\"메시지는 비어 있을 수 없습니다.\");\r\n+        }\r\n+        try {\r\n+            SymmetricEncryptionExample example = new SymmetricEncryptionExample();\r\n+            String encryptedMessage = example.encryptMessage(message);\r\n+            return ResponseEntity.ok(encryptedMessage);\r\n+        } catch (Exception e) {\r\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n+                                 .body(\"암호화에 실패했습니다: \" + e.getMessage());\r\n+        }\r\n     }\r\n \r\n-    @Operation(summary = \"대칭 복호화 (AES)\", description = \"암호화된 메시지를 AES 대칭 암호화 알고리즘으로 복호화합니다.\")\r\n-    @ApiResponses(value = {\r\n-        @ApiResponse(responseCode = \"200\", description = \"복호화 성공\"),\r\n-        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n-    })\r\n+    @Operation(summary = \"대칭 복호화 (AES)\", description = \"암호화된 메시지를 AES 대칭 암호화 알고리즘으로 복호화합니다.\",\r\n+               responses = {\r\n+                   @ApiResponse(responseCode = \"200\", description = \"복호화 성공\", \r\n+                                content = @Content(mediaType = \"application/json\", \r\n+                                                   examples = @ExampleObject(value = \"{\\\"decryptedMessage\\\": \\\"...\\\"}\"))),\r\n+                   @ApiResponse(responseCode = \"400\", description = \"잘못된 요청\"),\r\n+                   @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+               })\r\n     @PostMapping(\"/decrypt\")\r\n-    public String decrypt(@RequestParam(\"encryptedMessage\") String encryptedMessage) throws Exception {\r\n-        SymmetricEncryptionExample example = new SymmetricEncryptionExample();\r\n-        return example.decryptMessage(encryptedMessage);\r\n+    public ResponseEntity<String> decrypt(@RequestParam(\"encryptedMessage\") String encryptedMessage) {\r\n+        if (encryptedMessage == null || encryptedMessage.isEmpty()) {\r\n+            return ResponseEntity.badRequest().body(\"암호화된 메시지는 비어 있을 수 없습니다.\");\r\n+        }\r\n+        try {\r\n+            SymmetricEncryptionExample example = new SymmetricEncryptionExample();\r\n+            String decryptedMessage = example.decryptMessage(encryptedMessage);\r\n+            return ResponseEntity.ok(decryptedMessage);\r\n+        } catch (Exception e) {\r\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n+                                 .body(\"복호화에 실패했습니다: \" + e.getMessage());\r\n+        }\r\n     }\r\n \r\n     // 비대칭 암호화 (RSA)\r\n-    @Operation(summary = \"비대칭 암호화 (RSA)\", description = \"주어진 메시지를 RSA 비대칭 암호화 알고리즘으로 암호화합니다.\")\r\n-    @ApiResponses(value = {\r\n-        @ApiResponse(responseCode = \"200\", description = \"암호화 성공\"),\r\n-        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n-    })\r\n+    @Operation(summary = \"비대칭 암호화 (RSA)\", description = \"주어진 메시지를 RSA 비대칭 암호화 알고리즘으로 암호화합니다.\",\r\n+               responses = {\r\n+                   @ApiResponse(responseCode = \"200\", description = \"암호화 성공\", \r\n+                                content = @Content(mediaType = \"application/json\", \r\n+                                                   examples = @ExampleObject(value = \"{\\\"encryptedMessage\\\": \\\"...\\\"}\"))),\r\n+                   @ApiResponse(responseCode = \"400\", description = \"잘못된 요청\"),\r\n+                   @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+               })\r\n     @PostMapping(\"/asymmetric/encrypt\")\r\n-    public String asymmetricEncrypt(@RequestParam(\"message\") String message) throws Exception {\r\n-        AsymmetricEncryptionExample example = new AsymmetricEncryptionExample();\r\n-        return example.encryptMessage(message);\r\n+    public ResponseEntity<String> asymmetricEncrypt(@RequestParam(\"message\") String message) {\r\n+        if (message == null || message.isEmpty()) {\r\n+            return ResponseEntity.badRequest().body(\"메시지는 비어 있을 수 없습니다.\");\r\n+        }\r\n+        try {\r\n+            AsymmetricEncryptionExample example = new AsymmetricEncryptionExample();\r\n+            String encryptedMessage = example.encryptMessage(message);\r\n+            return ResponseEntity.ok(encryptedMessage);\r\n+        } catch (Exception e) {\r\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n+                                 .body(\"암호화에 실패했습니다: \" + e.getMessage());\r\n+        }\r\n     }\r\n \r\n-    @Operation(summary = \"비대칭 복호화 (RSA)\", description = \"암호화된 메시지를 RSA 비대칭 암호화 알고리즘으로 복호화합니다.\")\r\n-    @ApiResponses(value = {\r\n-        @ApiResponse(responseCode = \"200\", description = \"복호화 성공\"),\r\n-        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n-    })\r\n+    @Operation(summary = \"비대칭 복호화 (RSA)\", description = \"암호화된 메시지를 RSA 비대칭 암호화 알고리즘으로 복호화합니다.\",\r\n+               responses = {\r\n+                   @ApiResponse(responseCode = \"200\", description = \"복호화 성공\", \r\n+                                content = @Content(mediaType = \"application/json\", \r\n+                                                   examples = @ExampleObject(value = \"{\\\"decryptedMessage\\\": \\\"...\\\"}\"))),\r\n+                   @ApiResponse(responseCode = \"400\", description = \"잘못된 요청\"),\r\n+                   @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+               })\r\n     @PostMapping(\"/asymmetric/decrypt\")\r\n-    public String asymmetricDecrypt(@RequestParam(\"encryptedMessage\") String encryptedMessage) throws Exception {\r\n-        AsymmetricEncryptionExample example = new AsymmetricEncryptionExample();\r\n-        return example.decryptMessage(encryptedMessage);\r\n+    public ResponseEntity<String> asymmetricDecrypt(@RequestParam(\"encryptedMessage\") String encryptedMessage) {\r\n+        if (encryptedMessage == null || encryptedMessage.isEmpty()) {\r\n+            return ResponseEntity.badRequest().body(\"암호화된 메시지는 비어 있을 수 없습니다.\");\r\n+        }\r\n+        try {\r\n+            AsymmetricEncryptionExample example = new AsymmetricEncryptionExample();\r\n+            String decryptedMessage = example.decryptMessage(encryptedMessage);\r\n+            return ResponseEntity.ok(decryptedMessage);\r\n+        } catch (Exception e) {\r\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n+                                 .body(\"복호화에 실패했습니다: \" + e.getMessage());\r\n+        }\r\n     }\r\n \r\n     // 해시 함수 (SHA-256)\r\n-    @Operation(summary = \"해시 생성 (SHA-256)\", description = \"주어진 메시지에 대해 SHA-256 해시 값을 생성합니다.\")\r\n-    @ApiResponses(value = {\r\n-        @ApiResponse(responseCode = \"200\", description = \"해시 생성 성공\"),\r\n-        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n-    })\r\n+    @Operation(summary = \"해시 생성 (SHA-256)\", description = \"주어진 메시지에 대해 SHA-256 해시 값을 생성합니다.\",\r\n+               responses = {\r\n+                   @ApiResponse(responseCode = \"200\", description = \"해시 생성 성공\", \r\n+                                content = @Content(mediaType = \"application/json\", \r\n+                                                   examples = @ExampleObject(value = \"{\\\"hash\\\": \\\"...\\\"}\"))),\r\n+                   @ApiResponse(responseCode = \"400\", description = \"잘못된 요청\"),\r\n+                   @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+               })\r\n     @PostMapping(\"/hash\")\r\n-    public String hash(@RequestParam(\"message\") String message) throws Exception {\r\n-        HashFunctionExample example = new HashFunctionExample();\r\n-        return example.generateHash(message);\r\n+    public ResponseEntity<String> hash(@RequestParam(\"message\") String message) {\r\n+        if (message == null || message.isEmpty()) {\r\n+            return ResponseEntity.badRequest().body(\"메시지는 비어 있을 수 없습니다.\");\r\n+        }\r\n+        try {\r\n+            HashFunctionExample example = new HashFunctionExample();\r\n+            String hash = example.generateHash(message);\r\n+            return ResponseEntity.ok(hash);\r\n+        } catch (Exception e) {\r\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n+                                 .body(\"해시 생성에 실패했습니다: \" + e.getMessage());\r\n+        }\r\n     }\r\n \r\n     // 디지털 서명 생성\r\n-    @Operation(summary = \"디지털 서명 생성\", description = \"주어진 메시지에 대해 RSA를 이용한 디지털 서명을 생성합니다.\")\r\n-    @ApiResponses(value = {\r\n-        @ApiResponse(responseCode = \"200\", description = \"서명 생성 성공\"),\r\n-        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n-    })\r\n+    @Operation(summary = \"디지털 서명 생성\", description = \"주어진 메시지에 대해 RSA를 이용한 디지털 서명을 생성합니다.\",\r\n+               responses = {\r\n+                   @ApiResponse(responseCode = \"200\", description = \"서명 생성 성공\", \r\n+                                content = @Content(mediaType = \"application/json\", \r\n+                                                   examples = @ExampleObject(value = \"{\\\"signature\\\": \\\"...\\\"}\"))),\r\n+                   @ApiResponse(responseCode = \"400\", description = \"잘못된 요청\"),\r\n+                   @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+               })\r\n     @PostMapping(\"/sign\")\r\n-    public String sign(@RequestParam(\"message\") String message) throws Exception {\r\n-        DigitalSignatureExample example = new DigitalSignatureExample();\r\n-        return example.signMessage(message);\r\n+    public ResponseEntity<Map<String, String>> sign(@RequestParam(\"message\") String message) {\r\n+        if (message == null || message.isEmpty()) {\r\n+            return ResponseEntity.badRequest().body(Collections.singletonMap(\"error\", \"메시지는 비어 있을 수 없습니다.\"));\r\n+        }\r\n+        try {\r\n+            DigitalSignatureExample example = new DigitalSignatureExample();\r\n+            String signature = example.signMessage(message);\r\n+            Map<String, String> response = new HashMap<>();\r\n+            response.put(\"message\", message);\r\n+            response.put(\"signature\", signature);\r\n+            return ResponseEntity.ok(response);\r\n+        } catch (Exception e) {\r\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n+                                 .body(Collections.singletonMap(\"error\", \"서명 생성에 실패했습니다: \" + e.getMessage()));\r\n+        }\r\n     }\r\n \r\n     // 디지털 서명 검증\r\n-    @Operation(summary = \"디지털 서명 검증\", description = \"주어진 메시지와 서명을 이용해 디지털 서명을 검증합니다.\")\r\n-    @ApiResponses(value = {\r\n-        @ApiResponse(responseCode = \"200\", description = \"서명 검증 성공\"),\r\n-        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n-    })\r\n+    @Operation(summary = \"디지털 서명 검증\", description = \"주어진 메시지와 서명을 이용해 디지털 서명을 검증합니다.\",\r\n+               responses = {\r\n+                   @ApiResponse(responseCode = \"200\", description = \"서명 검증 성공\", \r\n+                                content = @Content(mediaType = \"application/json\", \r\n+                                                   examples = @ExampleObject(value = \"{\\\"valid\\\": true}\"))),\r\n+                   @ApiResponse(responseCode = \"400\", description = \"잘못된 요청\"),\r\n+                   @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+               })\r\n     @PostMapping(\"/verify\")\r\n-    public boolean verify(@RequestParam(\"message\") String message, @RequestParam(\"signature\") String signature) throws Exception {\r\n-        DigitalSignatureExample example = new DigitalSignatureExample();\r\n-        return example.verifySignature(message, signature);\r\n+    public ResponseEntity<Map<String, Boolean>> verify(@RequestParam(\"message\") String message, \r\n+                                                       @RequestParam(\"signature\") String signature) {\r\n+        if (message == null || message.isEmpty() || signature == null || signature.isEmpty()) {\r\n+            return ResponseEntity.badRequest().body(Collections.singletonMap(\"valid\", false));\r\n+        }\r\n+        try {\r\n+            DigitalSignatureExample example = new DigitalSignatureExample();\r\n+            boolean isValid = example.verifySignature(message, signature);\r\n+            return ResponseEntity.ok(Collections.singletonMap(\"valid\", isValid));\r\n+        } catch (Exception e) {\r\n+            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n+                                 .body(Collections.singletonMap(\"valid\", false));\r\n+        }\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1725438405577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,8 @@\n package com.example.lastdemo.cryptography;\r\n \r\n import io.swagger.v3.oas.annotations.Operation;\r\n import io.swagger.v3.oas.annotations.responses.ApiResponse;\r\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\r\n import io.swagger.v3.oas.annotations.media.Content;\r\n import io.swagger.v3.oas.annotations.media.ExampleObject;\r\n import org.springframework.http.HttpStatus;\r\n import org.springframework.http.ResponseEntity;\r\n"
                }
            ],
            "date": 1725352370133,
            "name": "Commit-0",
            "content": "package com.example.lastdemo.cryptography;\r\n\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/cryptography\")\r\npublic class CryptographyController {\r\n\r\n    @PostMapping(\"/encrypt\")\r\n    public String encrypt(@RequestParam String message) throws Exception {\r\n        SymmetricEncryptionExample example = new SymmetricEncryptionExample();\r\n        return example.encryptMessage(message);\r\n    }\r\n\r\n    @PostMapping(\"/decrypt\")\r\n    public String decrypt(@RequestParam String encryptedMessage) throws Exception {\r\n        SymmetricEncryptionExample example = new SymmetricEncryptionExample();\r\n        return example.decryptMessage(encryptedMessage);\r\n    }\r\n}\r\n"
        }
    ]
}