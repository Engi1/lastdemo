{
    "sourceFile": "src/main/java/com/example/lastdemo/cryptography/CryptographyController.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1725352370133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725352536026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n @RestController\r\n @RequestMapping(\"/api/cryptography\")\r\n public class CryptographyController {\r\n \r\n+    // 대칭 암호화 (AES)\r\n     @PostMapping(\"/encrypt\")\r\n     public String encrypt(@RequestParam String message) throws Exception {\r\n         SymmetricEncryptionExample example = new SymmetricEncryptionExample();\r\n         return example.encryptMessage(message);\r\n@@ -16,5 +17,38 @@\n     public String decrypt(@RequestParam String encryptedMessage) throws Exception {\r\n         SymmetricEncryptionExample example = new SymmetricEncryptionExample();\r\n         return example.decryptMessage(encryptedMessage);\r\n     }\r\n+\r\n+    // 비대칭 암호화 (RSA)\r\n+    @PostMapping(\"/asymmetric/encrypt\")\r\n+    public String asymmetricEncrypt(@RequestParam String message) throws Exception {\r\n+        AsymmetricEncryptionExample example = new AsymmetricEncryptionExample();\r\n+        return example.encryptMessage(message);\r\n+    }\r\n+\r\n+    @PostMapping(\"/asymmetric/decrypt\")\r\n+    public String asymmetricDecrypt(@RequestParam String encryptedMessage) throws Exception {\r\n+        AsymmetricEncryptionExample example = new AsymmetricEncryptionExample();\r\n+        return example.decryptMessage(encryptedMessage);\r\n+    }\r\n+\r\n+    // 해시 함수 (SHA-256)\r\n+    @PostMapping(\"/hash\")\r\n+    public String hash(@RequestParam String message) throws Exception {\r\n+        HashFunctionExample example = new HashFunctionExample();\r\n+        return example.generateHash(message);\r\n+    }\r\n+\r\n+    // 디지털 서명 (RSA 서명)\r\n+    @PostMapping(\"/sign\")\r\n+    public String sign(@RequestParam String message) throws Exception {\r\n+        DigitalSignatureExample example = new DigitalSignatureExample();\r\n+        return example.signMessage(message);\r\n+    }\r\n+\r\n+    @PostMapping(\"/verify\")\r\n+    public boolean verify(@RequestParam String message, @RequestParam String signature) throws Exception {\r\n+        DigitalSignatureExample example = new DigitalSignatureExample();\r\n+        return example.verifySignature(message, signature);\r\n+    }\r\n }\r\n"
                },
                {
                    "date": 1725352772618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,52 +1,90 @@\n package com.example.lastdemo.cryptography;\r\n \r\n+import io.swagger.v3.oas.annotations.Operation;\r\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\r\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\r\n import org.springframework.web.bind.annotation.*;\r\n \r\n @RestController\r\n @RequestMapping(\"/api/cryptography\")\r\n public class CryptographyController {\r\n \r\n     // 대칭 암호화 (AES)\r\n+    @Operation(summary = \"대칭 암호화 (AES)\", description = \"주어진 메시지를 AES 대칭 암호화 알고리즘으로 암호화합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"암호화 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/encrypt\")\r\n     public String encrypt(@RequestParam String message) throws Exception {\r\n         SymmetricEncryptionExample example = new SymmetricEncryptionExample();\r\n         return example.encryptMessage(message);\r\n     }\r\n \r\n+    @Operation(summary = \"대칭 복호화 (AES)\", description = \"암호화된 메시지를 AES 대칭 암호화 알고리즘으로 복호화합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"복호화 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/decrypt\")\r\n     public String decrypt(@RequestParam String encryptedMessage) throws Exception {\r\n         SymmetricEncryptionExample example = new SymmetricEncryptionExample();\r\n         return example.decryptMessage(encryptedMessage);\r\n     }\r\n \r\n     // 비대칭 암호화 (RSA)\r\n+    @Operation(summary = \"비대칭 암호화 (RSA)\", description = \"주어진 메시지를 RSA 비대칭 암호화 알고리즘으로 암호화합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"암호화 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/asymmetric/encrypt\")\r\n     public String asymmetricEncrypt(@RequestParam String message) throws Exception {\r\n         AsymmetricEncryptionExample example = new AsymmetricEncryptionExample();\r\n         return example.encryptMessage(message);\r\n     }\r\n \r\n+    @Operation(summary = \"비대칭 복호화 (RSA)\", description = \"암호화된 메시지를 RSA 비대칭 암호화 알고리즘으로 복호화합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"복호화 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/asymmetric/decrypt\")\r\n     public String asymmetricDecrypt(@RequestParam String encryptedMessage) throws Exception {\r\n         AsymmetricEncryptionExample example = new AsymmetricEncryptionExample();\r\n         return example.decryptMessage(encryptedMessage);\r\n     }\r\n \r\n     // 해시 함수 (SHA-256)\r\n+    @Operation(summary = \"해시 생성 (SHA-256)\", description = \"주어진 메시지에 대해 SHA-256 해시 값을 생성합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"해시 생성 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/hash\")\r\n     public String hash(@RequestParam String message) throws Exception {\r\n         HashFunctionExample example = new HashFunctionExample();\r\n         return example.generateHash(message);\r\n     }\r\n \r\n     // 디지털 서명 (RSA 서명)\r\n+    @Operation(summary = \"디지털 서명 생성\", description = \"주어진 메시지에 대해 RSA 알고리즘으로 디지털 서명을 생성합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"서명 생성 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/sign\")\r\n     public String sign(@RequestParam String message) throws Exception {\r\n         DigitalSignatureExample example = new DigitalSignatureExample();\r\n         return example.signMessage(message);\r\n     }\r\n \r\n+    @Operation(summary = \"디지털 서명 검증\", description = \"주어진 메시지와 서명을 사용해 RSA 알고리즘으로 서명을 검증합니다.\")\r\n+    @ApiResponses(value = {\r\n+        @ApiResponse(responseCode = \"200\", description = \"서명 검증 성공\"),\r\n+        @ApiResponse(responseCode = \"500\", description = \"서버 오류\")\r\n+    })\r\n     @PostMapping(\"/verify\")\r\n     public boolean verify(@RequestParam String message, @RequestParam String signature) throws Exception {\r\n         DigitalSignatureExample example = new DigitalSignatureExample();\r\n         return example.verifySignature(message, signature);\r\n"
                }
            ],
            "date": 1725352370133,
            "name": "Commit-0",
            "content": "package com.example.lastdemo.cryptography;\r\n\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/cryptography\")\r\npublic class CryptographyController {\r\n\r\n    @PostMapping(\"/encrypt\")\r\n    public String encrypt(@RequestParam String message) throws Exception {\r\n        SymmetricEncryptionExample example = new SymmetricEncryptionExample();\r\n        return example.encryptMessage(message);\r\n    }\r\n\r\n    @PostMapping(\"/decrypt\")\r\n    public String decrypt(@RequestParam String encryptedMessage) throws Exception {\r\n        SymmetricEncryptionExample example = new SymmetricEncryptionExample();\r\n        return example.decryptMessage(encryptedMessage);\r\n    }\r\n}\r\n"
        }
    ]
}