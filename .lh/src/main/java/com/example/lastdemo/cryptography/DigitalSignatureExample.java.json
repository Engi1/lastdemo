{
    "sourceFile": "src/main/java/com/example/lastdemo/cryptography/DigitalSignatureExample.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1725352234526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725352663798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,31 +8,31 @@\n import java.util.Base64;\r\n \r\n public class DigitalSignatureExample {\r\n \r\n-    public static void main(String[] args) throws Exception {\r\n-        // RSA 키 쌍 생성\r\n+    private PublicKey publicKey;\r\n+    private PrivateKey privateKey;\r\n+\r\n+    public DigitalSignatureExample() throws Exception {\r\n         KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\r\n         keyPairGenerator.initialize(2048);\r\n         KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n-        PublicKey publicKey = keyPair.getPublic();\r\n-        PrivateKey privateKey = keyPair.getPrivate();\r\n+        this.publicKey = keyPair.getPublic();\r\n+        this.privateKey = keyPair.getPrivate();\r\n+    }\r\n \r\n-        // 원본 메시지\r\n-        String originalMessage = \"Hello, this is a signed message!\";\r\n-\r\n-        // 디지털 서명 생성 (개인 키 사용)\r\n+    public String signMessage(String message) throws Exception {\r\n         Signature signature = Signature.getInstance(\"SHA256withRSA\");\r\n         signature.initSign(privateKey);\r\n-        signature.update(originalMessage.getBytes());\r\n+        signature.update(message.getBytes());\r\n         byte[] digitalSignature = signature.sign();\r\n-        String signedMessage = Base64.getEncoder().encodeToString(digitalSignature);\r\n-        System.out.println(\"Digital Signature: \" + signedMessage);\r\n+        return Base64.getEncoder().encodeToString(digitalSignature);\r\n+    }\r\n \r\n-        // 디지털 서명 검증 (공개 키 사용)\r\n-        Signature signatureVerify = Signature.getInstance(\"SHA256withRSA\");\r\n-        signatureVerify.initVerify(publicKey);\r\n-        signatureVerify.update(originalMessage.getBytes());\r\n-        boolean isVerified = signatureVerify.verify(Base64.getDecoder().decode(signedMessage));\r\n-        System.out.println(\"Signature Verified: \" + isVerified);\r\n+    public boolean verifySignature(String message, String signatureStr) throws Exception {\r\n+        Signature signature = Signature.getInstance(\"SHA256withRSA\");\r\n+        signature.initVerify(publicKey);\r\n+        signature.update(message.getBytes());\r\n+        byte[] digitalSignature = Base64.getDecoder().decode(signatureStr);\r\n+        return signature.verify(digitalSignature);\r\n     }\r\n }\r\n"
                },
                {
                    "date": 1725430842045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+package com.example.lastdemo.cryptography;\r\n+\r\n+import java.security.KeyFactory;\r\n+import java.security.KeyPair;\r\n+import java.security.KeyPairGenerator;\r\n+import java.security.PrivateKey;\r\n+import java.security.PublicKey;\r\n+import java.security.spec.PKCS8EncodedKeySpec;\r\n+import java.security.spec.X509EncodedKeySpec;\r\n+import javax.crypto.Cipher;\r\n+import java.util.Base64;\r\n+\r\n+public class DigitalSignatureExample {\r\n+\r\n+    private static final String PUBLIC_KEY_STR = \"your_base64_encoded_public_key_here\";\r\n+    private static final String PRIVATE_KEY_STR = \"your_base64_encoded_private_key_here\";\r\n+\r\n+    private PublicKey publicKey;\r\n+    private PrivateKey privateKey;\r\n+\r\n+    public DigitalSignatureExample() throws Exception {\r\n+        byte[] publicBytes = Base64.getDecoder().decode(PUBLIC_KEY_STR);\r\n+        byte[] privateBytes = Base64.getDecoder().decode(PRIVATE_KEY_STR);\r\n+\r\n+        X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(publicBytes);\r\n+        PKCS8EncodedKeySpec privKeySpec = new PKCS8EncodedKeySpec(privateBytes);\r\n+\r\n+        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\r\n+        this.publicKey = keyFactory.generatePublic(pubKeySpec);\r\n+        this.privateKey = keyFactory.generatePrivate(privKeySpec);\r\n+    }\r\n+\r\n+    public String signMessage(String message) throws Exception {\r\n+        Signature signature = Signature.getInstance(\"SHA256withRSA\");\r\n+        signature.initSign(privateKey);\r\n+        signature.update(message.getBytes(\"UTF-8\"));\r\n+        byte[] digitalSignature = signature.sign();\r\n+        return Base64.getEncoder().encodeToString(digitalSignature);\r\n+    }\r\n+\r\n+    public boolean verifySignature(String message, String signatureStr) throws Exception {\r\n+        Signature signature = Signature.getInstance(\"SHA256withRSA\");\r\n+        signature.initVerify(publicKey);\r\n+        signature.update(message.getBytes(\"UTF-8\"));\r\n+        byte[] digitalSignature = Base64.getDecoder().decode(signatureStr);\r\n+        return signature.verify(digitalSignature);\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1725430849896,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,48 @@\n+package com.example.lastdemo.cryptography;\r\n+\r\n+import java.security.KeyFactory;\r\n+import java.security.KeyPair;\r\n+import java.security.KeyPairGenerator;\r\n+import java.security.PrivateKey;\r\n+import java.security.PublicKey;\r\n+import java.security.spec.PKCS8EncodedKeySpec;\r\n+import java.security.spec.X509EncodedKeySpec;\r\n+import javax.crypto.Cipher;\r\n+import java.util.Base64;\r\n+\r\n+public class DigitalSignatureExample {\r\n+\r\n+    private static final String PUBLIC_KEY_STR = \"your_base64_encoded_public_key_here\";\r\n+    private static final String PRIVATE_KEY_STR = \"your_base64_encoded_private_key_here\";\r\n+\r\n+    private PublicKey publicKey;\r\n+    private PrivateKey privateKey;\r\n+\r\n+    public DigitalSignatureExample() throws Exception {\r\n+        byte[] publicBytes = Base64.getDecoder().decode(PUBLIC_KEY_STR);\r\n+        byte[] privateBytes = Base64.getDecoder().decode(PRIVATE_KEY_STR);\r\n+\r\n+        X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(publicBytes);\r\n+        PKCS8EncodedKeySpec privKeySpec = new PKCS8EncodedKeySpec(privateBytes);\r\n+\r\n+        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\r\n+        this.publicKey = keyFactory.generatePublic(pubKeySpec);\r\n+        this.privateKey = keyFactory.generatePrivate(privKeySpec);\r\n+    }\r\n+\r\n+    public String signMessage(String message) throws Exception {\r\n+        Signature signature = Signature.getInstance(\"SHA256withRSA\");\r\n+        signature.initSign(privateKey);\r\n+        signature.update(message.getBytes(\"UTF-8\"));\r\n+        byte[] digitalSignature = signature.sign();\r\n+        return Base64.getEncoder().encodeToString(digitalSignature);\r\n+    }\r\n+\r\n+    public boolean verifySignature(String message, String signatureStr) throws Exception {\r\n+        Signature signature = Signature.getInstance(\"SHA256withRSA\");\r\n+        signature.initVerify(publicKey);\r\n+        signature.update(message.getBytes(\"UTF-8\"));\r\n+        byte[] digitalSignature = Base64.getDecoder().decode(signatureStr);\r\n+        return signature.verify(digitalSignature);\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1725432333223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,13 +4,17 @@\n import java.security.KeyPair;\r\n import java.security.KeyPairGenerator;\r\n import java.security.PrivateKey;\r\n import java.security.PublicKey;\r\n+import java.security.Signature; // 올바른 Signature 클래스 임포트\r\n import java.security.spec.PKCS8EncodedKeySpec;\r\n import java.security.spec.X509EncodedKeySpec;\r\n-import javax.crypto.Cipher;\r\n import java.util.Base64;\r\n \r\n+import com.nimbusds.jose.JWSObjectJSON.Signature;\r\n+\r\n+import java.util.Base64;\r\n+\r\n public class DigitalSignatureExample {\r\n \r\n     private static final String PUBLIC_KEY_STR = \"your_base64_encoded_public_key_here\";\r\n     private static final String PRIVATE_KEY_STR = \"your_base64_encoded_private_key_here\";\r\n"
                },
                {
                    "date": 1725432339804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,12 +9,8 @@\n import java.security.spec.PKCS8EncodedKeySpec;\r\n import java.security.spec.X509EncodedKeySpec;\r\n import java.util.Base64;\r\n \r\n-import com.nimbusds.jose.JWSObjectJSON.Signature;\r\n-\r\n-import java.util.Base64;\r\n-\r\n public class DigitalSignatureExample {\r\n \r\n     private static final String PUBLIC_KEY_STR = \"your_base64_encoded_public_key_here\";\r\n     private static final String PRIVATE_KEY_STR = \"your_base64_encoded_private_key_here\";\r\n"
                },
                {
                    "date": 1725432347476,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n package com.example.lastdemo.cryptography;\r\n \r\n import java.security.KeyFactory;\r\n-import java.security.KeyPair;\r\n-import java.security.KeyPairGenerator;\r\n+// import java.security.KeyPair;\r\n+// import java.security.KeyPairGenerator;\r\n import java.security.PrivateKey;\r\n import java.security.PublicKey;\r\n import java.security.Signature; // 올바른 Signature 클래스 임포트\r\n import java.security.spec.PKCS8EncodedKeySpec;\r\n"
                },
                {
                    "date": 1725432407797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n package com.example.lastdemo.cryptography;\r\n \r\n import java.security.KeyFactory;\r\n-// import java.security.KeyPair;\r\n-// import java.security.KeyPairGenerator;\r\n+import java.security.KeyPair;\r\n+import java.security.KeyPairGenerator;\r\n import java.security.PrivateKey;\r\n import java.security.PublicKey;\r\n-import java.security.Signature; \r\n+import java.security.Signature; // 올바른 Signature 클래스 임포트\r\n import java.security.spec.PKCS8EncodedKeySpec;\r\n import java.security.spec.X509EncodedKeySpec;\r\n import java.util.Base64;\r\n \r\n@@ -30,17 +30,17 @@\n         this.privateKey = keyFactory.generatePrivate(privKeySpec);\r\n     }\r\n \r\n     public String signMessage(String message) throws Exception {\r\n-        Signature signature = Signature.getInstance(\"SHA256withRSA\");\r\n+        Signature signature = Signature.getInstance(\"SHA256withRSA\"); // 올바른 Signature 사용\r\n         signature.initSign(privateKey);\r\n         signature.update(message.getBytes(\"UTF-8\"));\r\n         byte[] digitalSignature = signature.sign();\r\n         return Base64.getEncoder().encodeToString(digitalSignature);\r\n     }\r\n \r\n     public boolean verifySignature(String message, String signatureStr) throws Exception {\r\n-        Signature signature = Signature.getInstance(\"SHA256withRSA\");\r\n+        Signature signature = Signature.getInstance(\"SHA256withRSA\"); // 올바른 Signature 사용\r\n         signature.initVerify(publicKey);\r\n         signature.update(message.getBytes(\"UTF-8\"));\r\n         byte[] digitalSignature = Base64.getDecoder().decode(signatureStr);\r\n         return signature.verify(digitalSignature);\r\n"
                },
                {
                    "date": 1725432548929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,10 @@\n import java.util.Base64;\r\n \r\n public class DigitalSignatureExample {\r\n \r\n-    private static final String PUBLIC_KEY_STR = \"your_base64_encoded_public_key_here\";\r\n-    private static final String PRIVATE_KEY_STR = \"your_base64_encoded_private_key_here\";\r\n+    private static final String PUBLIC_KEY_STR = \"생성된_공개키_Base64_문자열\";\r\n+    private static final String PRIVATE_KEY_STR = \"생성된_개인키_Base64_문자열\";\r\n \r\n     private PublicKey publicKey;\r\n     private PrivateKey privateKey;\r\n \r\n"
                }
            ],
            "date": 1725352234526,
            "name": "Commit-0",
            "content": "package com.example.lastdemo.cryptography;\r\n\r\nimport java.security.KeyPair;\r\nimport java.security.KeyPairGenerator;\r\nimport java.security.PrivateKey;\r\nimport java.security.PublicKey;\r\nimport java.security.Signature;\r\nimport java.util.Base64;\r\n\r\npublic class DigitalSignatureExample {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        // RSA 키 쌍 생성\r\n        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\r\n        keyPairGenerator.initialize(2048);\r\n        KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n        PublicKey publicKey = keyPair.getPublic();\r\n        PrivateKey privateKey = keyPair.getPrivate();\r\n\r\n        // 원본 메시지\r\n        String originalMessage = \"Hello, this is a signed message!\";\r\n\r\n        // 디지털 서명 생성 (개인 키 사용)\r\n        Signature signature = Signature.getInstance(\"SHA256withRSA\");\r\n        signature.initSign(privateKey);\r\n        signature.update(originalMessage.getBytes());\r\n        byte[] digitalSignature = signature.sign();\r\n        String signedMessage = Base64.getEncoder().encodeToString(digitalSignature);\r\n        System.out.println(\"Digital Signature: \" + signedMessage);\r\n\r\n        // 디지털 서명 검증 (공개 키 사용)\r\n        Signature signatureVerify = Signature.getInstance(\"SHA256withRSA\");\r\n        signatureVerify.initVerify(publicKey);\r\n        signatureVerify.update(originalMessage.getBytes());\r\n        boolean isVerified = signatureVerify.verify(Base64.getDecoder().decode(signedMessage));\r\n        System.out.println(\"Signature Verified: \" + isVerified);\r\n    }\r\n}\r\n"
        }
    ]
}