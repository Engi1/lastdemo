{
    "sourceFile": "src/main/java/com/example/lastdemo/cryptography/DigitalSignatureExample.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1725352234526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725352663798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,31 +8,31 @@\n import java.util.Base64;\r\n \r\n public class DigitalSignatureExample {\r\n \r\n-    public static void main(String[] args) throws Exception {\r\n-        // RSA 키 쌍 생성\r\n+    private PublicKey publicKey;\r\n+    private PrivateKey privateKey;\r\n+\r\n+    public DigitalSignatureExample() throws Exception {\r\n         KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\r\n         keyPairGenerator.initialize(2048);\r\n         KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n-        PublicKey publicKey = keyPair.getPublic();\r\n-        PrivateKey privateKey = keyPair.getPrivate();\r\n+        this.publicKey = keyPair.getPublic();\r\n+        this.privateKey = keyPair.getPrivate();\r\n+    }\r\n \r\n-        // 원본 메시지\r\n-        String originalMessage = \"Hello, this is a signed message!\";\r\n-\r\n-        // 디지털 서명 생성 (개인 키 사용)\r\n+    public String signMessage(String message) throws Exception {\r\n         Signature signature = Signature.getInstance(\"SHA256withRSA\");\r\n         signature.initSign(privateKey);\r\n-        signature.update(originalMessage.getBytes());\r\n+        signature.update(message.getBytes());\r\n         byte[] digitalSignature = signature.sign();\r\n-        String signedMessage = Base64.getEncoder().encodeToString(digitalSignature);\r\n-        System.out.println(\"Digital Signature: \" + signedMessage);\r\n+        return Base64.getEncoder().encodeToString(digitalSignature);\r\n+    }\r\n \r\n-        // 디지털 서명 검증 (공개 키 사용)\r\n-        Signature signatureVerify = Signature.getInstance(\"SHA256withRSA\");\r\n-        signatureVerify.initVerify(publicKey);\r\n-        signatureVerify.update(originalMessage.getBytes());\r\n-        boolean isVerified = signatureVerify.verify(Base64.getDecoder().decode(signedMessage));\r\n-        System.out.println(\"Signature Verified: \" + isVerified);\r\n+    public boolean verifySignature(String message, String signatureStr) throws Exception {\r\n+        Signature signature = Signature.getInstance(\"SHA256withRSA\");\r\n+        signature.initVerify(publicKey);\r\n+        signature.update(message.getBytes());\r\n+        byte[] digitalSignature = Base64.getDecoder().decode(signatureStr);\r\n+        return signature.verify(digitalSignature);\r\n     }\r\n }\r\n"
                }
            ],
            "date": 1725352234526,
            "name": "Commit-0",
            "content": "package com.example.lastdemo.cryptography;\r\n\r\nimport java.security.KeyPair;\r\nimport java.security.KeyPairGenerator;\r\nimport java.security.PrivateKey;\r\nimport java.security.PublicKey;\r\nimport java.security.Signature;\r\nimport java.util.Base64;\r\n\r\npublic class DigitalSignatureExample {\r\n\r\n    public static void main(String[] args) throws Exception {\r\n        // RSA 키 쌍 생성\r\n        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\r\n        keyPairGenerator.initialize(2048);\r\n        KeyPair keyPair = keyPairGenerator.generateKeyPair();\r\n        PublicKey publicKey = keyPair.getPublic();\r\n        PrivateKey privateKey = keyPair.getPrivate();\r\n\r\n        // 원본 메시지\r\n        String originalMessage = \"Hello, this is a signed message!\";\r\n\r\n        // 디지털 서명 생성 (개인 키 사용)\r\n        Signature signature = Signature.getInstance(\"SHA256withRSA\");\r\n        signature.initSign(privateKey);\r\n        signature.update(originalMessage.getBytes());\r\n        byte[] digitalSignature = signature.sign();\r\n        String signedMessage = Base64.getEncoder().encodeToString(digitalSignature);\r\n        System.out.println(\"Digital Signature: \" + signedMessage);\r\n\r\n        // 디지털 서명 검증 (공개 키 사용)\r\n        Signature signatureVerify = Signature.getInstance(\"SHA256withRSA\");\r\n        signatureVerify.initVerify(publicKey);\r\n        signatureVerify.update(originalMessage.getBytes());\r\n        boolean isVerified = signatureVerify.verify(Base64.getDecoder().decode(signedMessage));\r\n        System.out.println(\"Signature Verified: \" + isVerified);\r\n    }\r\n}\r\n"
        }
    ]
}