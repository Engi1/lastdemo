{
    "sourceFile": "src/main/java/com/example/lastdemo/blockchain/BlockchainService.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1725335733030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725336550759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import org.springframework.stereotype.Service;\r\n \r\n import java.security.MessageDigest;\r\n import java.util.ArrayList;\r\n-import java.util.Date;  // Date 클래스를 임포트\r\n+import java.util.Date;\r\n import java.util.List;\r\n \r\n @Service\r\n public class BlockchainService {\r\n@@ -16,17 +16,17 @@\n         blockchain.add(createGenesisBlock());\r\n     }\r\n \r\n     public Block createGenesisBlock() {\r\n-        long timestamp = new Date().getTime();  \r\n+        long timestamp = new Date().getTime();\r\n         String hash = calculateHash(0, \"0\", timestamp, \"Genesis Block\");\r\n         return new Block(0, \"0\", timestamp, \"Genesis Block\", hash);\r\n     }\r\n \r\n     public Block createNewBlock(String data) {\r\n         Block previousBlock = getLatestBlock();\r\n         int newIndex = previousBlock.getIndex() + 1;\r\n-        long timestamp = new Date().getTime(); \r\n+        long timestamp = new Date().getTime();\r\n         String hash = calculateHash(newIndex, previousBlock.getHash(), timestamp, data);\r\n         Block newBlock = new Block(newIndex, previousBlock.getHash(), timestamp, data, hash);\r\n         blockchain.add(newBlock);\r\n         return newBlock;\r\n@@ -39,8 +39,24 @@\n     public List<Block> getBlockchain() {\r\n         return blockchain;\r\n     }\r\n \r\n+    public boolean isChainValid() {\r\n+        for (int i = 1; i < blockchain.size(); i++) {\r\n+            Block currentBlock = blockchain.get(i);\r\n+            Block previousBlock = blockchain.get(i - 1);\r\n+\r\n+            if (!currentBlock.getHash().equals(calculateHash(currentBlock.getIndex(), currentBlock.getPreviousHash(), currentBlock.getTimestamp(), currentBlock.getData()))) {\r\n+                return false;\r\n+            }\r\n+\r\n+            if (!currentBlock.getPreviousHash().equals(previousBlock.getHash())) {\r\n+                return false;\r\n+            }\r\n+        }\r\n+        return true;\r\n+    }\r\n+\r\n     private String calculateHash(int index, String previousHash, long timestamp, String data) {\r\n         String value = index + previousHash + timestamp + data;\r\n         try {\r\n             MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\r\n"
                }
            ],
            "date": 1725335733030,
            "name": "Commit-0",
            "content": "package com.example.lastdemo.blockchain;\r\n\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.security.MessageDigest;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;  // Date 클래스를 임포트\r\nimport java.util.List;\r\n\r\n@Service\r\npublic class BlockchainService {\r\n    private List<Block> blockchain;\r\n\r\n    public BlockchainService() {\r\n        blockchain = new ArrayList<>();\r\n        blockchain.add(createGenesisBlock());\r\n    }\r\n\r\n    public Block createGenesisBlock() {\r\n        long timestamp = new Date().getTime();  \r\n        String hash = calculateHash(0, \"0\", timestamp, \"Genesis Block\");\r\n        return new Block(0, \"0\", timestamp, \"Genesis Block\", hash);\r\n    }\r\n\r\n    public Block createNewBlock(String data) {\r\n        Block previousBlock = getLatestBlock();\r\n        int newIndex = previousBlock.getIndex() + 1;\r\n        long timestamp = new Date().getTime(); \r\n        String hash = calculateHash(newIndex, previousBlock.getHash(), timestamp, data);\r\n        Block newBlock = new Block(newIndex, previousBlock.getHash(), timestamp, data, hash);\r\n        blockchain.add(newBlock);\r\n        return newBlock;\r\n    }\r\n\r\n    public Block getLatestBlock() {\r\n        return blockchain.get(blockchain.size() - 1);\r\n    }\r\n\r\n    public List<Block> getBlockchain() {\r\n        return blockchain;\r\n    }\r\n\r\n    private String calculateHash(int index, String previousHash, long timestamp, String data) {\r\n        String value = index + previousHash + timestamp + data;\r\n        try {\r\n            MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\r\n            byte[] hash = digest.digest(value.getBytes(\"UTF-8\"));\r\n            StringBuilder hexString = new StringBuilder();\r\n            for (byte b : hash) {\r\n                String hex = Integer.toHexString(0xff & b);\r\n                if (hex.length() == 1) hexString.append('0');\r\n                hexString.append(hex);\r\n            }\r\n            return hexString.toString();\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\r\n"
        }
    ]
}